{"version":3,"file":"5f8a6d84-81c9-42a5-b99f-2fb5b666e9cd.mjs","sources":["../../../src/mastra/tools/coffee-recommendation-tool.ts"],"sourcesContent":["import { createTool } from '@mastra/core/tools';\nimport { z } from 'zod';\n\n/**\n * Simplified Coffee Knowledge Tool\n *\n * This tool provides focused coffee knowledge for developer recommendations.\n * Simplified from the original 442-line implementation to be more maintainable and reusable.\n */\nexport const coffeeKnowledgeTool = createTool({\n  id: 'coffee-knowledge',\n  description:\n    'Provides coffee knowledge and suggestions based on developer preferences and context',\n  inputSchema: z.object({\n    query: z\n      .string()\n      .describe('Keywords for coffee knowledge lookup (e.g., \"flavor profile roast brewing\")'),\n    context: z\n      .string()\n      .optional()\n      .describe('Additional context about the developer profile'),\n  }),\n  outputSchema: z.object({\n    knowledge: z.string().describe('Relevant coffee knowledge and recommendations'),\n    suggestions: z.array(z.string()).describe('Specific coffee suggestions'),\n  }),\n  execute: async ({ context }) => {\n    const { query, context: devContext } = context;\n\n    // Simplified coffee knowledge focused on developer personality traits\n    const developerCoffeeMap = {\n      'creative innovative complex': {\n        knowledge: 'Creative developers often enjoy complex, innovative coffee experiences. Ethiopian single origins with bright, fruity flavors and wine-like acidity match their creative problem-solving approach.',\n        suggestions: ['Ethiopian Yirgacheffe', 'Kenyan AA', 'Natural Process Single Origin']\n      },\n      'reliable practical efficient': {\n        knowledge: 'Practical developers prefer reliable, consistent coffee that gets the job done. Brazilian and Colombian beans offer balanced, no-nonsense flavors with reliable quality.',\n        suggestions: ['Brazilian Santos', 'Colombian Supremo', 'Medium Roast Blend']\n      },\n      'performance speed system': {\n        knowledge: 'Performance-focused developers need efficient caffeine delivery. Cold brew and espresso provide quick, concentrated energy without complexity.',\n        suggestions: ['Cold Brew Concentrate', 'Double Espresso', 'Nitro Cold Brew']\n      },\n      'enterprise traditional robust': {\n        knowledge: 'Enterprise developers value stability and proven solutions. Dark roast blends offer bold, reliable flavors that have stood the test of time.',\n        suggestions: ['French Roast', 'Italian Dark Blend', 'Espresso Roast']\n      },\n      'elegant simple clean': {\n        knowledge: 'Developers who value elegance prefer clean, well-crafted coffee. Pour-over brewing methods highlight the pure essence of high-quality beans.',\n        suggestions: ['Japanese Pour-Over', 'Light Roast Single Origin', 'Chemex Coffee']\n      },\n      'experimental cutting-edge modern': {\n        knowledge: 'Modern, experimental developers enjoy innovative brewing methods and unique flavor profiles. Specialty processing and alternative brewing unlock new experiences.',\n        suggestions: ['Honey Process Coffee', 'AeroPress', 'Specialty Fermented Beans']\n      }\n    };\n\n    // Basic language-specific recommendations\n    const languageTraits = {\n      'Node.js': 'creative innovative async',\n      'Python': 'elegant simple readable',\n      'Java': 'enterprise traditional robust',\n      'Go': 'performance speed efficient',\n      'Ruby': 'elegant creative expressive',\n      '.NET': 'enterprise reliable structured',\n      'PHP': 'practical reliable web-focused'\n    };\n\n    let knowledge = '';\n    let suggestions: string[] = [];\n\n    // Extract language from context if available\n    const contextLower = (devContext || '').toLowerCase();\n    const queryLower = query.toLowerCase();\n    \n    // Find matching traits based on language or context\n    let matchingTraits = '';\n    for (const [lang, traits] of Object.entries(languageTraits)) {\n      if (contextLower.includes(lang.toLowerCase())) {\n        matchingTraits = traits;\n        break;\n      }\n    }\n\n    // If no language match, use query keywords\n    if (!matchingTraits) {\n      if (queryLower.includes('creative') || queryLower.includes('innovative')) {\n        matchingTraits = 'creative innovative complex';\n      } else if (queryLower.includes('performance') || queryLower.includes('speed')) {\n        matchingTraits = 'performance speed system';\n      } else if (queryLower.includes('elegant') || queryLower.includes('simple')) {\n        matchingTraits = 'elegant simple clean';\n      } else if (queryLower.includes('enterprise') || queryLower.includes('traditional')) {\n        matchingTraits = 'enterprise traditional robust';\n      } else {\n        matchingTraits = 'reliable practical efficient';\n      }\n    }\n\n    // Find best matching coffee knowledge\n    for (const [traits, coffeeInfo] of Object.entries(developerCoffeeMap)) {\n      const traitWords = traits.split(' ');\n      const matchingWords = traitWords.filter(word => \n        matchingTraits.includes(word) || contextLower.includes(word)\n      );\n      \n      if (matchingWords.length > 0) {\n        knowledge = coffeeInfo.knowledge;\n        suggestions = coffeeInfo.suggestions;\n        break;\n      }\n    }\n\n    // Fallback if no specific match\n    if (!knowledge) {\n      knowledge = 'A well-balanced coffee that complements focused development work. Consider medium roast origins that provide consistent energy and pleasant flavors without being overpowering.';\n      suggestions = ['Colombian Medium Roast', 'Brazilian Blend', 'Balanced Espresso'];\n    }\n\n    return {\n      knowledge,\n      suggestions,\n    };\n  },\n});\n\n/**\n * Developer Profile Analysis Tool\n * \n * Simplified tool for analyzing developer preferences\n */\nexport const developerProfileTool = createTool({\n  id: 'developer-profile',\n  description: 'Analyzes developer preferences and tech stack choices',\n  inputSchema: z.object({\n    language: z.string(),\n    framework: z.string(),\n    ide: z.string(),\n    vibe: z.string(),\n  }),\n  outputSchema: z.object({\n    profile: z.string(),\n    traits: z.array(z.string()),\n  }),\n  execute: async ({ context }) => {\n    const { language, framework, ide, vibe } = context;\n\n    const profile = `Developer using ${language} with ${framework}, codes in ${ide}, and follows a ${vibe} approach.`;\n    \n    // Basic trait analysis\n    const traits = [];\n    if (language === 'Go' || language === 'Rust') traits.push('performance-focused');\n    if (language === 'Python' || language === 'Ruby') traits.push('elegant');\n    if (language === 'Java' || language === '.NET') traits.push('enterprise');\n    if (vibe.includes('creative') || vibe.includes('artistic')) traits.push('creative');\n    if (vibe.includes('simple') || vibe.includes('minimal')) traits.push('minimalist');\n\n    return {\n      profile,\n      traits: traits.length > 0 ? traits : ['balanced'],\n    };\n  },\n});\n"],"names":[],"mappings":"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"}